name: Continuous Integration and Deployment

on: [push]

env:
  PAPERTRAIL_URL: ${{ secrets.PAPERTRAIL_URL }}
  WEB_IMAGE: optideploy_web
  DB_IMAGE: optideploy_db

jobs:

  test:
    name: Quality Checks and Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety
      - name: Flake8
        run: flake8 --max-line-length 199
      - name: Black
        run: black . --check
      - name: isort
        run: isort . --check-only
      - name: bandit
        run: bandit .
      - name: safety
        run: safety check
      - name: Spin up containers
        run: docker-compose up -d --build
      - name: Run Tests
        run: docker-compose exec -T web python -m pytest .

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Build images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_NAMESPACE }}/${{env.WEB_IMAGE}}:latest -f ./project/Dockerfile ./project
          docker build -t ${{ secrets.DOCKERHUB_NAMESPACE }}/${{env.DB_IMAGE}}:latest -f ./project/db/Dockerfile ./project/db
      - name: Log in to Dockerhub
        run: echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_NAMESPACE }} --password-stdin
      - name: Push to Dockerhub
        run: |
          docker push ${{ secrets.DOCKERHUB_NAMESPACE }}/${{env.WEB_IMAGE}}:latest
          docker push ${{ secrets.DOCKERHUB_NAMESPACE }}/${{env.DB_IMAGE}}:latest 


  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: ssh in to server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan ${{ secrets.SERVER_IPV4 }} >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
          ssh root@${{ secrets.SERVER_IPV4 }} whoami 

      
      
      
      # - name: copy file via ssh key
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     port: ${{ secrets.PORT }}
      #     key: ${{ secrets.KEY }}
      #     source: "tests/a.txt,tests/b.txt"
      #     target: "test"
      # - name: executing remote ssh commands using ssh key
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.KEY }}
      #     port: ${{ secrets.PORT }}
      #     script: |
      #       whoami
      #       whoami