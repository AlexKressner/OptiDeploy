name: Continuous Integration and Deployment to DigitalOcean

on: [push]

env:
  PAPERTRAIL_URL: ${{ secrets.PAPERTRAIL_URL }}
  WEB_IMAGE: optideploy_web
  DB_IMAGE: optideploy_db

jobs:

  test:
    name: Quality Checks and Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety
      - name: Flake8
        run: flake8 --max-line-length 199
      - name: Black
        run: black . --check
      - name: isort
        run: isort . --check-only
      - name: bandit
        run: bandit .
      - name: safety
        run: safety check
      - name: Spin up containers
        run: docker-compose up -d --build
      - name: Run Tests
        run: docker-compose exec -T web python -m pytest .


  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: set release date
        run: |
          echo "RELEASE_DATE=$(date --rfc-3339=date)" >> $GITHUB_ENV
      - name: Build images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_NAMESPACE }}/$WEB_IMAGE:$RELEASE_DATE -f ./project/Dockerfile ./project
          docker build -t ${{ secrets.DOCKERHUB_NAMESPACE }}/$DB_IMAGE:$RELEASE_DATE -f ./project/db/Dockerfile ./project/db
      - name: Log in to Dockerhub
        run: echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_NAMESPACE }} --password-stdin
      - name: Push to Dockerhub
        run: |
          docker push ${{ secrets.DOCKERHUB_NAMESPACE }}/$WEB_IMAGE:$RELEASE_DATE
          docker push ${{ secrets.DOCKERHUB_NAMESPACE }}/$DB_IMAGE:$RELEASE_DATE 


  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' 
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          echo PAPERTRAIL_URL=$PAPERTRAIL_URL >> .env
          echo WEB_IMAGE=${{ secrets.DOCKERHUB_NAMESPACE }}/$WEB_IMAGE:$RELEASE_DATE >> .env
          echo DB_IMAGE=${{ secrets.DOCKERHUB_NAMESPACE }}/$DB_IMAGE:$RELEASE_DATE >> .env
      - name: Copy .env and stack to manager node via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IPV4 }}
          username: root
          key: ${{ secrets.PRIVATE_KEY }}
          source: "./.env, ./docker-compose-swarm.yml"
          target: "~"
      - name: Update the stack on manager node via ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IPV4 }}
          username: root
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            source .env
            echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_NAMESPACE }} --password-stdin
            docker pull $WEB_IMAGE
            docker pull $DB_IMAGE
            docker stack deploy --compose-file=docker-compose-swarm.yml optideploy