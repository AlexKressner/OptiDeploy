version: '3.8'

services:
  web:
    image: "${WEB_IMAGE?Variable WEB_IMAGE not set}"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 5s
      rollback_config:
        parallelism: 0
        order: stop-first
    command: gunicorn -k uvicorn.workers.UvicornWorker -c app/config.py app.main:app
    ports:
      - 8004:8000
    env_file:
      - ./.env
    depends_on:   
      - mongodb
      - redis
      - rabbitmq
    logging:
      driver: syslog
      options:
        syslog-address: "tcp+tls://${PAPERTRAIL_URL?Variable PAPERTRAIL not set}"
        tag: "{{.Name}}/{{.ID}}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
    networks:
      - app

  mongodb:
    image: "${DB_IMAGE?Variable DB_IMAGE not set}"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    env_file:
      - ./.env
    volumes:
      - mongodbdata:/data/db
    logging:
      driver: syslog
      options:
        syslog-address: "tcp+tls://${PAPERTRAIL_URL?Variable PAPERTRAIL_URL not set}"
        tag: "{{.Name}}/{{.ID}}"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping')"]
    networks:
      - app

  worker:
    image: "${WEB_IMAGE?Variable WEB_IMAGE not set}"
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 5s
      rollback_config:
        parallelism: 0
        order: stop-first
    command: celery --app=app.main.celery worker --loglevel=info
    env_file:
      - ./.env
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    logging:
      driver: syslog
      options:
        syslog-address: "tcp+tls://${PAPERTRAIL_URL?Variable PAPERTRAIL not set}"
        tag: "{{.Name}}/{{.ID}}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
    networks:
      - app

  redis:
    image: redis:6-alpine
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
    networks:
      - app

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    env_file:
      - ./.env
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
    networks:
      - app

  flower:
    image: "${WEB_IMAGE?Variable WEB_IMAGE not set}"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 5s
      rollback_config:
        parallelism: 0
        order: stop-first
    command: sh -c "/usr/src/app/start_flower.sh"
    ports:
      - 5556:5555
    env_file:
      - ./.env
    depends_on:
      - redis
      - worker
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
    networks:
      - app

networks:
  app:
    driver: overlay

volumes: 
  mongodbdata: